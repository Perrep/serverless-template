service: SERVICE_NAME
app: APP_NAME
org: ORG_NAME

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-central-1
  stage: ${opt:stage, 'dev'}

  iamRoleStatements:
  #    - Effect: "Allow"
  #      Action:
  #        - "dynamodb:Scan"
  #        - "dynamodb:Query"
  #        - "dynamodb:PutItem"
  #      Resource:
  #        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.product}
  #        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.product}/index/pk
  environment:
    ENV: "ENV"
    # Login creds

functions:
  dummy:
    handler: src/functions/dummy.dummy

resources:
#  Resources:
#    product:
#      Type: AWS::DynamoDB::Table
#      DeletionPolicy: Retain
#      Properties:
#        TableName: ${self:custom.dynamodb.product}
#        AttributeDefinitions:
#          - AttributeName: pk
#            AttributeType: S
#        KeySchema:
#          - AttributeName: pk
#            KeyType: HASH
#        BillingMode: PAY_PER_REQUEST
#    ApiGatewayRestApi:
#      Type: AWS::ApiGateway::RestApi
#      Properties:
#        Name: ${self:provider.stage}-${self:service}
#    GatewayResponseResourceNotFound:
#      Type: "AWS::ApiGateway::GatewayResponse"
#      Properties:
#        RestApiId:
#          Ref: "ApiGatewayRestApi"
#        ResponseType: BAD_REQUEST_BODY
#        "StatusCode": "422"
#        ResponseTemplates:
#          application/json: '{"message": "$context.error.message", "error": "$context.error.validationErrorString"}'

custom:
  #  dynamodb:
  #    product: ${self:service}-product-${self:provider.stage}
  #    stages:
  #      - dev
  #    start:
  #      port: 8000
  #      inMemory: true
  #      migrate: true

  serverless-mocha-plugin:
    testTemplate: templates/test-template.ejs
    functionTemplate: templates/function-template.ejs

plugins:
  - serverless-mocha
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-dynamodb-local
